// Code generated by MockGen. DO NOT EDIT.
// Source: bolt.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/o1egl/pidor-bot/domain"
	repo "github.com/o1egl/pidor-bot/repo"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// CreateVote mocks base method.
func (m *MockRepo) CreateVote(ctx context.Context, chatID int64, vote domain.Vote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVote", ctx, chatID, vote)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVote indicates an expected call of CreateVote.
func (mr *MockRepoMockRecorder) CreateVote(ctx, chatID, vote interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVote", reflect.TypeOf((*MockRepo)(nil).CreateVote), ctx, chatID, vote)
}

// GetUsers mocks base method.
func (m *MockRepo) GetUsers(ctx context.Context, chatID int64) ([]domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", ctx, chatID)
	ret0, _ := ret[0].([]domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockRepoMockRecorder) GetUsers(ctx, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockRepo)(nil).GetUsers), ctx, chatID)
}

// GetVotes mocks base method.
func (m *MockRepo) GetVotes(ctx context.Context, chatID int64, opts ...repo.StatsFilterOpts) ([]domain.Vote, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, chatID}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetVotes", varargs...)
	ret0, _ := ret[0].([]domain.Vote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVotes indicates an expected call of GetVotes.
func (mr *MockRepoMockRecorder) GetVotes(ctx, chatID interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, chatID}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVotes", reflect.TypeOf((*MockRepo)(nil).GetVotes), varargs...)
}

// UpsertUser mocks base method.
func (m *MockRepo) UpsertUser(ctx context.Context, chatID int64, user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertUser", ctx, chatID, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertUser indicates an expected call of UpsertUser.
func (mr *MockRepoMockRecorder) UpsertUser(ctx, chatID, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertUser", reflect.TypeOf((*MockRepo)(nil).UpsertUser), ctx, chatID, user)
}
