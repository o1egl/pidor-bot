// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package log

import (
	"database/sql/driver"
	"errors"
	"fmt"
	"strings"
)

const (
	// FormatPlain is a Format of type Plain.
	FormatPlain Format = iota
	// FormatJson is a Format of type Json.
	FormatJson
)

const _FormatName = "plainjson"

var _FormatNames = []string{
	_FormatName[0:5],
	_FormatName[5:9],
}

// FormatNames returns a list of possible string values of Format.
func FormatNames() []string {
	tmp := make([]string, len(_FormatNames))
	copy(tmp, _FormatNames)
	return tmp
}

var _FormatMap = map[Format]string{
	FormatPlain: _FormatName[0:5],
	FormatJson:  _FormatName[5:9],
}

// String implements the Stringer interface.
func (x Format) String() string {
	if str, ok := _FormatMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Format(%d)", x)
}

var _FormatValue = map[string]Format{
	_FormatName[0:5]:                  FormatPlain,
	strings.ToLower(_FormatName[0:5]): FormatPlain,
	_FormatName[5:9]:                  FormatJson,
	strings.ToLower(_FormatName[5:9]): FormatJson,
}

// ParseFormat attempts to convert a string to a Format.
func ParseFormat(name string) (Format, error) {
	if x, ok := _FormatValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _FormatValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Format(0), fmt.Errorf("%s is not a valid Format, try [%s]", name, strings.Join(_FormatNames, ", "))
}

// MarshalText implements the text marshaller method.
func (x Format) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Format) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseFormat(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var _FormatErrNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Format) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Format(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = Format(v)
	case string:
		*x, err = ParseFormat(v)
	case []byte:
		*x, err = ParseFormat(string(v))
	case Format:
		*x = v
	case int:
		*x = Format(v)
	case *Format:
		if v == nil {
			return _FormatErrNilPtr
		}
		*x = *v
	case uint:
		*x = Format(v)
	case uint64:
		*x = Format(v)
	case *int:
		if v == nil {
			return _FormatErrNilPtr
		}
		*x = Format(*v)
	case *int64:
		if v == nil {
			return _FormatErrNilPtr
		}
		*x = Format(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = Format(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return _FormatErrNilPtr
		}
		*x = Format(*v)
	case *uint:
		if v == nil {
			return _FormatErrNilPtr
		}
		*x = Format(*v)
	case *uint64:
		if v == nil {
			return _FormatErrNilPtr
		}
		*x = Format(*v)
	case *string:
		if v == nil {
			return _FormatErrNilPtr
		}
		*x, err = ParseFormat(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x Format) Value() (driver.Value, error) {
	return x.String(), nil
}

const (
	// LevelDebug is a Level of type Debug.
	LevelDebug Level = iota
	// LevelInfo is a Level of type Info.
	LevelInfo
	// LevelWarn is a Level of type Warn.
	LevelWarn
	// LevelError is a Level of type Error.
	LevelError
	// LevelFatal is a Level of type Fatal.
	LevelFatal
)

const _LevelName = "debuginfowarnerrorfatal"

var _LevelNames = []string{
	_LevelName[0:5],
	_LevelName[5:9],
	_LevelName[9:13],
	_LevelName[13:18],
	_LevelName[18:23],
}

// LevelNames returns a list of possible string values of Level.
func LevelNames() []string {
	tmp := make([]string, len(_LevelNames))
	copy(tmp, _LevelNames)
	return tmp
}

var _LevelMap = map[Level]string{
	LevelDebug: _LevelName[0:5],
	LevelInfo:  _LevelName[5:9],
	LevelWarn:  _LevelName[9:13],
	LevelError: _LevelName[13:18],
	LevelFatal: _LevelName[18:23],
}

// String implements the Stringer interface.
func (x Level) String() string {
	if str, ok := _LevelMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Level(%d)", x)
}

var _LevelValue = map[string]Level{
	_LevelName[0:5]:                    LevelDebug,
	strings.ToLower(_LevelName[0:5]):   LevelDebug,
	_LevelName[5:9]:                    LevelInfo,
	strings.ToLower(_LevelName[5:9]):   LevelInfo,
	_LevelName[9:13]:                   LevelWarn,
	strings.ToLower(_LevelName[9:13]):  LevelWarn,
	_LevelName[13:18]:                  LevelError,
	strings.ToLower(_LevelName[13:18]): LevelError,
	_LevelName[18:23]:                  LevelFatal,
	strings.ToLower(_LevelName[18:23]): LevelFatal,
}

// ParseLevel attempts to convert a string to a Level.
func ParseLevel(name string) (Level, error) {
	if x, ok := _LevelValue[name]; ok {
		return x, nil
	}
	// Case insensitive parse, do a separate lookup to prevent unnecessary cost of lowercasing a string if we don't need to.
	if x, ok := _LevelValue[strings.ToLower(name)]; ok {
		return x, nil
	}
	return Level(0), fmt.Errorf("%s is not a valid Level, try [%s]", name, strings.Join(_LevelNames, ", "))
}

// MarshalText implements the text marshaller method.
func (x Level) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Level) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseLevel(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

var _LevelErrNilPtr = errors.New("value pointer is nil") // one per type for package clashes

// Scan implements the Scanner interface.
func (x *Level) Scan(value interface{}) (err error) {
	if value == nil {
		*x = Level(0)
		return
	}

	// A wider range of scannable types.
	// driver.Value values at the top of the list for expediency
	switch v := value.(type) {
	case int64:
		*x = Level(v)
	case string:
		*x, err = ParseLevel(v)
	case []byte:
		*x, err = ParseLevel(string(v))
	case Level:
		*x = v
	case int:
		*x = Level(v)
	case *Level:
		if v == nil {
			return _LevelErrNilPtr
		}
		*x = *v
	case uint:
		*x = Level(v)
	case uint64:
		*x = Level(v)
	case *int:
		if v == nil {
			return _LevelErrNilPtr
		}
		*x = Level(*v)
	case *int64:
		if v == nil {
			return _LevelErrNilPtr
		}
		*x = Level(*v)
	case float64: // json marshals everything as a float64 if it's a number
		*x = Level(v)
	case *float64: // json marshals everything as a float64 if it's a number
		if v == nil {
			return _LevelErrNilPtr
		}
		*x = Level(*v)
	case *uint:
		if v == nil {
			return _LevelErrNilPtr
		}
		*x = Level(*v)
	case *uint64:
		if v == nil {
			return _LevelErrNilPtr
		}
		*x = Level(*v)
	case *string:
		if v == nil {
			return _LevelErrNilPtr
		}
		*x, err = ParseLevel(*v)
	}

	return
}

// Value implements the driver Valuer interface.
func (x Level) Value() (driver.Value, error) {
	return x.String(), nil
}
